// Comprehensive test schema for Prisma Effect Schema Generator
// Covers all edge cases, type mappings, UUID detection strategies, and enum handling

datasource db {
  provider = "postgresql"
  url      = "postgresql://localhost:5432/test"
}

generator test_client {
  provider = "prisma-client-js"
}

generator effect_kysely {
  provider = "prisma-effect-kysely"
  output   = "../generated"
}

// ============================================================================
// ENUMS - Testing enum generation and @map handling
// ============================================================================

enum Role {
  ADMIN
  GUEST
  USER
}

enum Status {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  PENDING  @map("pending")
}

// ============================================================================
// COMPREHENSIVE MODEL - Tests all types, UUID detection, and enums
// ============================================================================

model AllTypes {
  // UUID Detection - Strategy 1: Native type (@db.Uuid)
  id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))

  // UUID Detection - Strategy 2: Documentation
  /// @db.Uuid
  tenant_id String

  // UUID Detection - Strategy 1: Native type with default
  session_id String @db.Uuid @default(dbgenerated("gen_random_uuid()"))

  // All Prisma scalar types
  stringField    String
  optionalString String?
  stringArray    String[]

  intField    Int
  optionalInt Int?
  intArray    Int[]

  floatField    Float
  optionalFloat Float?
  floatArray    Float[]

  bigIntField    BigInt
  optionalBigInt BigInt?
  bigIntArray    BigInt[]

  decimalField    Decimal // Maps to String for precision
  optionalDecimal Decimal?
  decimalArray    Decimal[]

  boolField    Boolean
  optionalBool Boolean?
  boolArray    Boolean[]

  dateField    DateTime
  optionalDate DateTime?
  dateArray    DateTime[]

  jsonField    Json // Maps to Unknown
  optionalJson Json?
  jsonArray    Json[]

  bytesField    Bytes // Maps to Uint8Array
  bytesArray    Bytes[]
  optionalBytes Bytes?
  // Enum fields
  role           Role
  optionalRole   Role?
  roleArray      Role[]
  status         Status
  optionalStatus Status?
  statusArray    Status[]

  // Unsupported types
  customType Unsupported("custom")?

  // ID strategies and field attributes
  cuidField   String   @default(cuid())
  ulidField   String   @default(ulid())
  uniqueEmail String   @unique
  mappedField String   @map("db_mapped_field")
  mappedWithDefault Int @default(0) @map("mapped_default")
  ignoredField String? @ignore
  updatedAt   DateTime @updatedAt

  createdAt DateTime @default(now())
}


// ============================================================================
// COMPOSITE ID MODEL - Testing @@id, @@unique, @@index, @@map
// ============================================================================

model CompositeIdModel {
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  timestamp DateTime @default(now())

  @@id([userId, postId])
  @@unique([userId, timestamp])
  @@index([postId])
  @@map("composite_id_table")
}

// ============================================================================
// RELATIONS - Testing relation field exclusion (only foreign keys should appear)
// ============================================================================

// One-to-One relation
model User {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  name      String
  profile   Profile? // Relation field (should be excluded)
  posts     Post[]   // Relation field (should be excluded)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  bio    String
  userId String @unique @db.Uuid // Foreign key (should be included)
  user   User   @relation(fields: [userId], references: [id]) // Relation field (should be excluded)
}

// One-to-Many relation
model Post {
  id         String     @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  title      String
  content    String?
  published  Boolean    @default(false)
  authorId   String     @db.Uuid // Foreign key (should be included)
  author     User       @relation(fields: [authorId], references: [id]) // Relation field (should be excluded)
  categories Category[] // Relation field (should be excluded)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// Many-to-Many relation (implicit) - default naming
model Category {
  id    String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name  String @unique
  posts Post[] // Relation field (should be excluded)
}

// Many-to-Many relation (implicit) - custom relation name
model Product {
  id   String      @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name String
  tags ProductTag[] @relation("product_tags")
}

model ProductTag {
  id       String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name     String
  products Product[] @relation("product_tags")
}

// Self-relation
model Employee {
  id           String     @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name         String
  managerId    String?    @db.Uuid // Foreign key (should be included)
  manager      Employee?  @relation("EmployeeManagement", fields: [managerId], references: [id]) // Relation field (should be excluded)
  subordinates Employee[] @relation("EmployeeManagement") // Relation field (should be excluded)
}

// ============================================================================
// CUSTOM TYPE ANNOTATIONS - Testing @customType annotation support
// ============================================================================

model AnnotationTest {
  id String @id @default(cuid())

  /// @customType(Schema.String.pipe(Schema.email()))
  email String @unique

  /// @customType(Schema.Number.pipe(Schema.positive()))
  age Int

  /// @customType(Schema.String.pipe(Schema.brand('UserId')))
  userId String

  /// @customType(Schema.Array(Schema.Number).pipe(Schema.itemsCount(3)))
  coordinates Int[]

  createdAt DateTime @default(now())
}

// ============================================================================
// NAMING STANDARDIZATION - Testing PascalCase conversion
// ============================================================================

model session_model_preference {
  id           String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  user_id      String   @db.Uuid
  theme        String
  language     String   @default("en")
  notifications Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("session_preferences")
}
